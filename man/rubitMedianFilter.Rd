% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/medianFilter.R
\name{rubitMedianFilter}
\alias{rubitMedianFilter}
\title{Apply a running median filter on an an area matrix.}
\usage{
rubitMedianFilter(m, k = 15)
}
\arguments{
\item{m}{a numerical matrix corresponding to an area.}

\item{k}{an integer specifying the size of the smoothing window. \emph{It must be odd}.}
}
\value{
A numerical matrix of the same dimension as m.
}
\description{
This function is used to eliminate outliers from an area matrix.
}
\examples{
data(weevils)

### Apply different 'k' values to a list of area matrices:
w15 <- lapply(weevils, rubitMedianFilter, k = 15)
w101 <- lapply(weevils, rubitMedianFilter, k = 101)

### See impacts of smoothing parameter 'k' on a trajectory:
## raw trajectory
plot(weevils[['08']][1:100,'X'] ~ weevils[['08']][1:100,'Y'], asp=1, type='l')
## acceptable level of smoothing
lines(w15[['08']][1:100,'X'] ~ w15[['08']][1:100,'Y'],col='green')
## oversmoothed
lines(w101[['08']][1:100,'X'] ~ w101[['08']][1:100,'Y'],col='red')
}
\seealso{
\code{\link{rubitLinearInterpolate}} to get regular sampling after filtering.
}

