ggsurv(surv.mod, surv.col = myCol, lty.est= myLty, size.est = 0.7, order.legend = F) +
scale_y_continuous(labels = scales::percent) +
ylab("% survival") +
xlab("Time (days)") +
theme_bw() +
theme(axis.text = element_text(size = 14, colour = "black"),
text = element_text(size = 14),
panel.background = element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank(),
legend.position = c(0.9, 0.7),
legend.background = element_rect(color = "black", linetype = "solid"))
ggsurv(surv.mod, surv.col = myCol, lty.est= myLty, size.est = 0.7, order.legend = F) +
scale_y_continuous(labels = scales::percent) +
ylab("% survival") +
xlab("Time (days)") +
theme_bw() +
theme(axis.text = element_text(size = 14, colour = "black"),
text = element_text(size = 14),
panel.background = element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank(),
legend.position = c(0.9, 0.72),
legend.background = element_rect(color = "black", linetype = "solid"))
ggsurv(surv.mod, surv.col = myCol, lty.est= myLty, size.est = 0.7, order.legend = F) +
scale_y_continuous(labels = scales::percent) +
ylab("% survival") +
xlab("Time (days)") +
theme_bw() +
theme(axis.text = element_text(size = 14, colour = "black"),
text = element_text(size = 14),
panel.background = element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank(),
legend.position = c(0.9, 0.71),
legend.background = element_rect(color = "black", linetype = "solid"))
ggsurv(surv.mod2, surv.col = "black", lty.est= c(1,2), size.est = 0.7, order.legend = F) +
scale_y_continuous(labels = scales::percent) +
ylab("% survival") +
xlab("Time (days)") +
theme_bw() +
theme(axis.text = element_text(size = 14, colour = "black"),
text = element_text(size = 14),
panel.background = element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank(),
legend.position = c(0.9, 0.71),
legend.background = element_rect(color = "black", linetype = "solid"))
ggsurv(surv.mod2, surv.col = "black", lty.est= c(1,2), size.est = 0.7, order.legend = F) +
scale_y_continuous(labels = scales::percent) +
ylab("% survival") +
xlab("Time (days)") +
theme_bw() +
theme(axis.text = element_text(size = 14, colour = "black"),
text = element_text(size = 14),
panel.background = element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank(),
legend.position = c(0.85, 0.81),
legend.background = element_rect(color = "black", linetype = "solid"))
head(egg_comb)
egg_comb %>%
group_by(treat, rep, day)
cor.test(egg_comb$count, egg_comb$volume.mean, method = "spearman")
mod1 <- coxph(Surv(death, event) ~ treat, data = d3)
mod1
summary(glht(mod1, mcp(treat="Tukey")))
mod1
ggsurv(surv.mod, surv.col = myCol, lty.est= myLty, size.est = 0.7, order.legend = F) +
scale_y_continuous(labels = scales::percent) +
ylab("% survival") +
xlab("Time (days)") +
theme_bw() +
theme(axis.text = element_text(size = 14, colour = "black"),
text = element_text(size = 14),
panel.background = element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
axis.line = element_line(colour = "black"),
legend.title=element_blank(),
legend.position = c(0.9, 0.71),
legend.background = element_rect(color = "black", linetype = "solid"))
mod2 <- coxph(Surv(death, event) ~ challenged, data=d3)
mod2
write.csv(egg_comb, "~/Desktop/egg_images/egg_data.csv")
d3
write.csv(d3, "~/Desktop/egg_images/survival.csv")
ggplot(ss, aes(x = date, y = volume, group = interaction(treat, rep))) +
geom_line() +
geom_smooth(aes(x = date, y = volume), method = 'loess', col = "red", lwd = 3)
head(ss)
ggplot(ss, aes(x = day, y = volume.mean, group = interaction(treat, rep))) +
geom_line() +
geom_smooth(aes(x = day, y = volume.mean), method = 'loess', col = "red", lwd = 3)
ss6 <- egg_comb %>%
group_by(treat, rep, day) %>%
summarise(length = mean(length.mean), width = mean(new_width), volume = mean(volume), n = n())
head(egg_comb)
ggplot(egg_comb, aes(x = day, y = volume.mean, group = interaction(treat, rep))) +
geom_line() +
geom_smooth(aes(x = day, y = volume.mean), method = 'loess', col = "red", lwd = 3)
warnings()
head(egg_comb)
ggplot(egg_comb, aes(x = day, y = count, group = interaction(treat, rep))) +
geom_line() +
geom_smooth(aes(x = day, y = count), method = 'loess', col = "red", lwd = 3)
ggplot(data = egg_comb, aes(x = count, y = volume.mean)) +
geom_point()
ss <- egg_comb %>%
group_by(treat) %>%
filter(count > 0) %>%
summarise(volumePerEgg.mean = mean(volume.mean / count, na.rm=T), volumePerEgg.se = plotrix::std.error(volume.mean / count, na.rm=T))
ggplot(ss3, aes(x = treat, y = volume.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = volume.mean - volume.se, ymax = volume.mean + volume.se)) +
ylab(expression(Mean~egg~volume~(mm^3)))
ss <- egg_size %>%
group_by(treat, rep, day) %>%
summarise(length.mean = mean(length), length.se = plotrix::std.error(length), width.mean = mean(width, na.rm=T), width.se = plotrix::std.error(width, na.rm=T), volume.mean = mean(volume), volume.se = plotrix::std.error(volume, na.rm=T))
ggplot(ss, aes(x = treat, y = volume.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = volume.mean - volume.se, ymax = volume.mean + volume.se)) +
ylab(expression(Mean~egg~volume~(mm^3)))
ss <- egg_size %>%
group_by(treat) %>%
summarise(length.mean = mean(length), length.se = plotrix::std.error(length), width.mean = mean(width, na.rm=T), width.se = plotrix::std.error(width, na.rm=T), volume.mean = mean(volume), volume.se = plotrix::std.error(volume, na.rm=T))
ggplot(ss, aes(x = treat, y = volume.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = volume.mean - volume.se, ymax = volume.mean + volume.se)) +
ylab(expression(Mean~egg~volume~(mm^3)))
head(ss)
ss <- egg_size %>%
group_by(treat) %>%
summarise(length.mean = mean(length), length.se = plotrix::std.error(length), width.mean = mean(width, na.rm=T), width.se = plotrix::std.error(width, na.rm=T), volume.mean = mean(volume), volume.se = plotrix::std.error(volume, na.rm=T), count.sum = sum(count), count.mean = mean(count), count.se = plotrix:std.error(count)))
ss <- egg_size %>%
group_by(treat) %>%
summarise(length.mean = mean(length), length.se = plotrix::std.error(length), width.mean = mean(width, na.rm=T), width.se = plotrix::std.error(width, na.rm=T), volume.mean = mean(volume), volume.se = plotrix::std.error(volume, na.rm=T), count.sum = sum(count), count.mean = mean(count), count.se = plotrix:std.error(count))
ss <- egg_comb %>%
group_by(treat) %>%
summarise(length.mean = mean(length), length.se = plotrix::std.error(length), width.mean = mean(width, na.rm=T), width.se = plotrix::std.error(width, na.rm=T), volume.mean = mean(volume), volume.se = plotrix::std.error(volume, na.rm=T), count.sum = sum(count), count.mean = mean(count), count.se = plotrix:std.error(count))
head(egg_comb)
egg_size_ss <- egg_size %>%
group_by(treat, rep, day) %>%
summarise(length.mean = mean(length), length.se = plotrix::std.error(length), width.mean = mean(width, na.rm=T), width.se = plotrix::std.error(width, na.rm=T), volume.mean = mean(volume), volume.se = plotrix::std.error(volume, na.rm=T))
egg_size_ss
left_join(egg_count, egg_size_ss, by = c("treat" = "treat", "rep" = "rep", "day" = "day"))
egg_comb <- left_join(egg_count, egg_size_ss, by = c("treat" = "treat", "rep" = "rep", "day" = "day"))
ss <- egg_comb %>%
group_by(treat) %>%
summarise(length.mean = mean(length), length.se = plotrix::std.error(length), width.mean = mean(width, na.rm=T), width.se = plotrix::std.error(width, na.rm=T), volume.mean = mean(volume), volume.se = plotrix::std.error(volume, na.rm=T), count.sum = sum(count), count.mean = mean(count), count.se = plotrix:std.error(count))
head(egg_comb)
egg_size
ss <- egg_size %>%
group_by(treat) %>%
summarise(length.mean = mean(length), length.se = plotrix::std.error(length), width.mean = mean(width, na.rm=T), width.se = plotrix::std.error(width, na.rm=T), volume.mean = mean(volume), volume.se = plotrix::std.error(volume, na.rm=T))
ss
egg_comb %>%
group_by(treat) %>%
summarise(count.sum = sum(count), count.mean = mean(count), count.se = plotrix:std.error(count))
egg_comb %>%
group_by(treat) %>%
summarise(count.sum = sum(count), count.mean = mean(count), count.se = plotrix::std.error(count))
left_join(ss,
egg_comb %>%
group_by(treat) %>%
summarise(count.sum = sum(count), count.mean = mean(count), count.se = plotrix::std.error(count)),
by = "treat")
ggplot(ss, aes(x = treat, y = count.sum)) +
geom_bar(position="dodge", stat="identity") +
ylab("Total number of eggs")
head(ss)
ss <- left_join(ss,
egg_comb %>%
group_by(treat) %>%
summarise(count.sum = sum(count), count.mean = mean(count), count.se = plotrix::std.error(count)),
by = "treat")
ss
ss$count.sum
ggplot(ss, aes(x = treat, y = count.sum)) +
geom_bar(position="dodge", stat="identity")
ggplot(ss, aes(x = treat, y = count.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = count.mean - count.se, ymax = count.mean + count.se)) +
ylab("Mean number of eggs")
ggplot(ss, aes(x = treat, y = count.sum)) +
geom_bar(position="dodge", stat="identity") +
ylab("Total number of eggs")
ggplot(ss, aes(x = treat, y = count.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = count.mean - count.se, ymax = count.mean + count.se)) +
ylab("Mean number of eggs")
ss3 <- egg_size %>%
group_by(treat) %>%
filter(count > 0) %>%
summarise(volumePerEgg.mean = mean(volume.mean / count, na.rm=T), volumePerEgg.se = plotrix::std.error(volume.mean / count, na.rm=T))
head(egg_size)
ss3 <- egg_comb %>%
group_by(treat) %>%
filter(count > 0) %>%
summarise(volumePerEgg.mean = mean(volume.mean / count, na.rm=T), volumePerEgg.se = plotrix::std.error(volume.mean / count, na.rm=T))
head(s2)
head(ss2)
ss3 <- egg_comb %>%
group_by(treat) %>%
filter(count > 0) %>%
summarise(volumePerEgg.mean = mean(volume.mean / count, na.rm=T), volumePerEgg.se = plotrix::std.error(volume.mean / count, na.rm=T))
ggplot(ss3, aes(x = treat, y = volumePerEgg.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = volumePerEgg.mean - volumePerEgg.se, ymax = volumePerEgg.mean + volumePerEgg.se)) +
ylab(expression(Mean~volume~per~egg~(mm^3)))
ss <- egg_size %>%
group_by(treat) %>%
summarise(length.mean = mean(length), length.se = plotrix::std.error(length), width.mean = mean(width, na.rm=T), width.se = plotrix::std.error(width, na.rm=T), volume.mean = mean(volume), volume.se = plotrix::std.error(volume, na.rm=T))
ggplot(ss, aes(x = treat, y = volume.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = volume.mean - volume.se, ymax = volume.mean + volume.se)) +
ylab(expression(Mean~egg~volume~(mm^3)))
ss2 <- left_join(ss,
egg_comb %>%
group_by(treat) %>%
summarise(count.sum = sum(count), count.mean = mean(count), count.se = plotrix::std.error(count)),
by = "treat")
ggplot(ss2, aes(x = treat, y = count.sum)) +
geom_bar(position="dodge", stat="identity") +
ylab("Total number of eggs")
ggplot(ss2, aes(x = treat, y = count.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = count.mean - count.se, ymax = count.mean + count.se)) +
ylab("Mean number of eggs")
ss3 <- egg_comb %>%
group_by(treat) %>%
filter(count > 0) %>%
summarise(volumePerEgg.mean = mean(volume.mean / count, na.rm=T), volumePerEgg.se = plotrix::std.error(volume.mean / count, na.rm=T))
ggplot(ss3, aes(x = treat, y = volumePerEgg.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = volumePerEgg.mean - volumePerEgg.se, ymax = volumePerEgg.mean + volumePerEgg.se)) +
ylab(expression(Mean~volume~per~egg~(mm^3)))
mod2 <- aov(volume.mean ~ treat, ss)
mod2
anova1 <- aov(volume.mean ~ treat, ss)
summary(anova())
summary(anova1
)
anova1 <- aov(volume.mean ~ treat, data = ss)
ss
summary(anova1)
head(egg_size)
anova1 <- aov(volume ~ treat, data = egg_size)
summary(anova1)
summary(glht(fit1, mcp(treat="Tukey")))
summary(glht(anova1, mcp(treat="Tukey")))
glht(anova1, mcp(treat="Tukey"))
egg_size$treat
class(egg_size$treat)
egg_size$treat <- as.factor(egg_size$treat)
anova1 <- aov(volume ~ treat, data = egg_size)
glht(anova1, mcp(treat="Tukey"))
egg_count$treat <- as.factor(egg_count$treat)
HSD.test(anova1)
library(agricolae)
HSD.test(anova1)
HSD.test(anova1, trt="treat")
print(HSD.test(anova1, trt="treat"))
ggplot(ss, aes(x = treat, y = volume.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = volume.mean - volume.se, ymax = volume.mean + volume.se)) +
ylab(expression(Mean~egg~volume~(mm^3)))
summary(anova())
summary(anova1
)
head(egg_comb)
egg_comb <- left_join(egg_count, egg_size_ss, by = c("treat" = "treat", "rep" = "rep", "day" = "day"))
egg_count$treat <- as.factor(egg_count$treat)
egg_comb <- left_join(egg_count, egg_size_ss, by = c("treat" = "treat", "rep" = "rep", "day" = "day"))
egg_size_ss <- egg_size %>%
group_by(treat, rep, day) %>%
summarise(length.mean = mean(length), length.se = plotrix::std.error(length), width.mean = mean(width, na.rm=T), width.se = plotrix::std.error(width, na.rm=T), volume.mean = mean(volume), volume.se = plotrix::std.error(volume, na.rm=T))
egg_comb <- left_join(egg_count, egg_size_ss, by = c("treat" = "treat", "rep" = "rep", "day" = "day"))
egg_comb
anova2 <- aov(count ~ treat, data = egg_comb)
anova2
summary(anova2)
glm.nb(count ~ treat, data = egg_comb)
nb1 <- glm.nb(count ~ treat, data = egg_comb)
anova(nb1)
anova2 <- aov(count ~ treat, data = egg_comb)
summary(anova2)
print(HSD.test(anova2, trt="treat"))
ggplot(ss2, aes(x = treat, y = count.sum)) +
geom_bar(position="dodge", stat="identity") +
ylab("Total number of eggs")
anova3 <- anova(nb1)
print(HSD.test(anova2, trt="treat"))
ggplot(ss2, aes(x = treat, y = count.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = count.mean - count.se, ymax = count.mean + count.se)) +
ylab("Mean number of eggs")
ggplot(ss2, aes(x = treat, y = count.sum)) +
geom_bar(position="dodge", stat="identity") +
ylab("Total number of eggs")
ggplot(ss2, aes(x = treat, y = count.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = count.mean - count.se, ymax = count.mean + count.se)) +
ylab("Mean number of eggs")
ss3 <- egg_comb %>%
group_by(treat) %>%
filter(count > 0) %>%
summarise(volumePerEgg.mean = mean(volume.mean / count, na.rm=T), volumePerEgg.se = plotrix::std.error(volume.mean / count, na.rm=T))
ggplot(ss3, aes(x = treat, y = volumePerEgg.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = volumePerEgg.mean - volumePerEgg.se, ymax = volumePerEgg.mean + volumePerEgg.se)) +
ylab(expression(Mean~volume~per~egg~(mm^3)))
head(egg_comb)
anova3 <- aov(count ~ (volume.mean / count), data = egg_comb)
print(HSD.test(anova3, trt="treat"))
summary(anova3)
egg_comb <- egg_comb %>%
mutate(volumePerEgg.mean = volume.mean / count)
head(egg_comb)
ss3 <- egg_comb %>%
group_by(treat) %>%
filter(count > 0) %>%
summarise(volumePerEgg.mean = mean(volumePerEgg.mean), volumePerEgg.se = plotrix::std.error(volumePerEgg.mean, na.rm=T))
ss
ss3
ss3 <- egg_comb %>%
group_by(treat) %>%
filter(count > 0) %>%
summarise(volumePerEgg.mean = mean(volumePerEgg.mean, na.rm=T), volumePerEgg.se = plotrix::std.error(volumePerEgg.mean, na.rm=T))
ss3 <- egg_comb %>%
group_by(treat) %>%
filter(count > 0) %>%
summarise(volumePerEgg.mean = mean(volumePerEgg.mean, na.rm=T), volumePerEgg.se = plotrix::std.error(volumePerEgg.mean, na.rm=T))
ss3
head(egg_comb)
ss3 <- egg_comb %>%
group_by(treat) %>%
filter(count > 0) %>%
summarise(volumePerEgg.mean = mean(volume.mean / count, na.rm=T), volumePerEgg.se = plotrix::std.error(volume.mean / count, na.rm=T))
ss3
egg_comb <- egg_comb %>%
mutate(volumePerEgg = volume.mean / count)
anova3 <- aov(count ~ volumePerEgg, data = egg_comb)
egg_comb <- egg_comb %>%
filter(count > 0) %>%
mutate(volumePerEgg = volume.mean / count)
egg_comb
anova3 <- aov(count ~ volumePerEgg, data = egg_comb)
summary(anova3)
print(HSD.test(anova3, trt="treat"))
HSD.test(anova3, trt="treat")
aov(nb1)
anova3 <- aov(nb1)
print(HSD.test(anova3, trt="treat"))
anova4 <- aov(volumePerEgg ~ treat, data = egg_comb)
print(HSD.test(anova4, trt="treat"))
summary(anova4)
cor.test(egg_comb$count, egg_comb$volume.mean, method = "spearman")
ggplot(ss3, aes(x = treat, y = volumePerEgg.mean)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = volumePerEgg.mean - volumePerEgg.se, ymax = volumePerEgg.mean + volumePerEgg.se)) +
ylab(expression(Mean~volume~per~egg~(mm^3)))
egg_comb
ggplot(data = egg_comb, aes(x = count, y = volume.mean)) +
geom_point()
warning()
head(egg_comb)
ggplot(egg_comb, aes(x = day, y = volumePerEgg, group = interaction(treat, rep))) +
geom_line() +
geom_smooth(aes(x = day, y = volumePerEgg), method = 'loess', col = "red", lwd = 3)
ss4 <- egg_comb %>%
group_by(treat, rep, day) %>%
summarise(volume.mean = mean(volume), volume.se = plotrix::std.error(volume, na.rm=T))
head(egg_comb)
ss4 <- egg_comb %>%
group_by(treat, rep, day) %>%
summarise(volume.mean = mean(volume), volume.se = plotrix::std.error(volume, na.rm=T), count.mean = mean(count, na.rm=T), count.se = plotrix::std.error(count, na.rm=T))
ss4 <- egg_comb %>%
group_by(treat, rep, day) %>%
summarise(volume.mean = mean(volume.mean), volume.se = plotrix::std.error(volume.mean, na.rm=T), volumePerEgg.mean = mean(volumePerEgg, na.rm=T), count.mean = mean(count, na.rm=T), count.se = plotrix::std.error(count, na.rm=T))
ss4
ss4 <- egg_comb %>%
group_by(treat, rep, day) %>%
summarise(volume.mean = mean(volume.mean, na.rm=T), volume.se = plotrix::std.error(volume.mean, na.rm=T), volumePerEgg.mean = mean(volumePerEgg, na.rm=T),  volumePerEgg.se = plotrix::std.error(volumePerEgg, na.rm=T), count.mean = mean(count, na.rm=T), count.se = plotrix::std.error(count, na.rm=T))
ss
ss4
ss4 <- egg_comb %>%
group_by(treat, rep, day) %>%
summarise(volume.mean = mean(volume.mean, na.rm=T), volume.se = plotrix::std.error(volume.mean, na.rm=T), volumePerEgg.mean = mean(volumePerEgg, na.rm=T),  volumePerEgg.se = plotrix::std.error(volumePerEgg, na.rm=T), count.mean = mean(count, na.rm=T), count.se = plotrix::std.error(count, na.rm=T))
ss4 <- egg_comb %>%
group_by(treat, day) %>%
summarise(volume.mean = mean(volume.mean, na.rm=T), volume.se = plotrix::std.error(volume.mean, na.rm=T), volumePerEgg.mean = mean(volumePerEgg, na.rm=T),  volumePerEgg.se = plotrix::std.error(volumePerEgg, na.rm=T), count.mean = mean(count, na.rm=T), count.se = plotrix::std.error(count, na.rm=T))
ss4
ggplot(ss4, aes(x = day, y = volume.mean, group = treat)) +
geom_line() +
geom_smooth(aes(x = day, y = volume.mean), method = 'loess', col = "red", lwd = 3)
ggplot(ss4, aes(x = day, y = volume.mean, group = treat)) +
geom_line()
head(treat)
ggplot(ss4, aes(x = day, y = volume.mean, colour = treat)) +
geom_line()
ggplot(egg_comb, aes(x = day, y = volumePerEgg, colour = treat)) +
geom_line()
ggplot(ss4, aes(x = day, y = volumePerEgg, colour = treat)) +
geom_line()
head(ss4)
ggplot(ss4, aes(x = day, y = volumePerEgg.mean, colour = treat)) +
geom_line()
ggplot(ss4, aes(x = day, y = count.mean, colour = treat)) +
geom_line()
ggplot(ss4, aes(x = day, y = volume.mean, colour = treat)) +
geom_line()
myCol
ggplot(egg_comb, aes(x = day, y = volume.mean, group = interaction(treat, rep))) +
geom_line() +
scale_color_manual(myCol)
ggplot(egg_comb, aes(x = day, y = volume.mean, group = interaction(treat, rep))) +
geom_line() +
scale_color_manual(values = myCol)
ggplot(ss4, aes(x = day, y = volume.mean, colour = treat)) +
geom_line() +
scale_color_manual(values = myCol)
myCol <- c("red", "red", "blue", "blue", "black", "black")
myLty <- c(1, 2, 1, 2, 1, 2)
ggplot(ss4, aes(x = day, y = volume.mean, colour = treat)) +
geom_line() +
scale_color_manual(values = myCol)
ggplot(ss4, aes(x = day, y = volume.mean, colour = treat)) +
geom_line() +
scale_color_manual(values = myCol) +
scale_linetype_manual(values = myLty)
myLty
ggplot(ss4, aes(x = day, y = volume.mean, colour = treat, lty = treat)) +
geom_line() +
scale_color_manual(values = myCol) +
scale_linetype_manual(values = myLty)
ggplot(ss4, aes(x = day, y = count.mean, colour = treat, lty = treat)) +
geom_line() +
scale_linetype_manual(values = myLty)
ggplot(ss4, aes(x = day, y = volumePerEgg.mean, colour = treat, lty = treat)) +
geom_line() +
scale_linetype_manual(values = myLty)
surv.mod2 <- survfit(Surv(death, event) ~ challenged, data=d3)
surv.mod2
summary(surv.mod2)
mod2 <- coxph(Surv(death, event) ~ challenged, data=d3)
summary(mod2)
ggplot(ss4, aes(x = day, y = count.mean, colour = treat, lty = treat)) +
geom_line() +
scale_linetype_manual(values = myLty)
ggplot(ss4, aes(x = day, y = volumePerEgg.mean, colour = treat, lty = treat)) +
geom_line() +
scale_linetype_manual(values = myLty)
ggplot(ss4, aes(x = day, y = volume.mean, colour = treat, lty = treat)) +
geom_line() +
scale_color_manual(values = myCol) +
scale_linetype_manual(values = myLty)
ggplot(ss4, aes(x = day, y = volumePerEgg.mean, colour = treat, lty = treat)) +
geom_line() +
scale_linetype_manual(values = myLty)
library(rubitrail)
library("rubitrail", "~/Dropbox/github/rubitrail_2.0.1.tar.gz")
library("rubitrail", "~/Dropbox/github/rubitrail/")
install.packages("~/Dropbox/github/rubitrail_2.0.1.tar.gz")
library(devtools)
setwd("~/Dropbox/github/rubitrail/")
build()
install.packages("~/Dropbox/github/rubitrail_2.0.1.tar.gz")
library(rubitrail)
check()
install_github("jogall", "rubitrail")
install_github("jogall/rubitrail")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
build()
install.packages("~/Dropbox/github/rubitrail_2.0.1.tar.gz")
document()
build_vignettes()
build_vignettes(rubitrai)
build_vignettes(rubitrail)
build_vignettes("rubitrail")
load_all()
rubitail
library(rubitail)
use_vignette()
install.packages("~/Dropbox/github/rubitrail_2.0.1.tar.gz")
install.packages("~/Dropbox/github/rubitrail_2.0.1.tar.gz", repos = NULL, type="source")
library(rubitrail)
calcPosition
calcPosition()
data(tenebrio_basic)
attach(tenebrio_basic)
attach(data(tenebrio_basic))
data(weevils_basic)
attach(tenebrio_basic)
data(tenebrio_basic)
tenebrio_basic
head(tenebrio)
sapply(tenebrio_basic, rubitCalcPosition, n_radials = 8, n_slices = 12, thigmo_dist = 20)
sapply(tenebrio, rubitCalcPosition, n_radials = 8, n_slices = 12, thigmo_dist = 20)
sapply(tenebrio, rubitCalcPosition, n_radials = 8, n_slices = 12, thigmo_dist = 20)
